{
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "Read(//Users/paul/Documents/Gource/src/**)",
      "Read(//Users/paul/Documents/Gource/**)",
      "Bash(git log:*)",
      "Bash(npm run:*)",
      "Bash(open /Users/paul/Documents/code-evolution-viz/processor/output/timeline-report.html)",
      "Read(//Users/paul/Documents/react/**)",
      "Bash(else echo \"React repo not found - need to clone\")",
      "Bash(fi)",
      "Bash(awk:*)",
      "Bash(git config:*)",
      "Bash(gh repo create:*)",
      "Bash(open https://github.com/new)",
      "Bash(git remote add:*)",
      "Bash(git push:*)",
      "Bash(git pull:*)",
      "Read(//private/tmp/**)",
      "Read(//tmp/**)",
      "Bash(open http://localhost:3001/)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(open /Users/paul/Documents/code-evolution-viz/processor/output/timeline-report-v1-fixed-thresholds.html)",
      "Bash(jq:*)",
      "Bash(python3:*)",
      "Bash(open http://localhost:3002/)",
      "Bash(node:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nSlice 2 Phase 2: Implement timeline analyzer with adaptive sampling\n\nAdded timeline analysis capability alongside existing HEAD analysis:\n- Created TimelineAnalyzer with proven V2 adaptive algorithm\n- Added timeline data types (TimelineData, CommitSnapshot, DrillDownLayer)\n- Added --timeline CLI flag to processor\n- Backward compatible: existing static mode unchanged\n\nTimeline features:\n- Adaptive percentile-based commit scoring\n- 3-phase selection: milestones first, then temporal spread\n- Guaranteed version tag capture (100% success rate tested)\n- Repository-specific thresholds (works for both small and large repos)\n\nTested on gource (988 commits): 50 commit sample captured all 22 tags\nEOF\n)\")",
      "Read(//Users/paul/.npm/_logs/**)",
      "Bash(cat:*)",
      "Bash(lsof:*)",
      "Bash(curl -s http://localhost:3001/src/colorModeManager.ts)",
      "Bash(curl -s \"http://localhost:3003/src/colorModeManager.ts\")",
      "Bash(curl:*)",
      "Read(//Users/paul/Documents/**)",
      "Read(//Users/paul/Documents/cbioportal/cbioportal/**)",
      "Bash(git rev-parse:*)",
      "Bash(git checkout:*)",
      "Read(//Users/paul/Documents/cbioportal/cbioportal-frontend/**)",
      "Bash(xargs kill:*)",
      "Bash(open http://localhost:3000/)",
      "Bash(grep:*)",
      "Bash(readlink:*)",
      "Bash(mkdir:*)",
      "Bash(git show:*)",
      "Bash(GIT_SEQUENCE_EDITOR=\"cat > /tmp/rebase-todo\" git rebase -i d851d18fc5deba903e9bf41cee6d4617486f884d~1)",
      "Bash(git filter-branch:*)",
      "Bash(git stash:*)",
      "Bash(git for-each-ref:*)",
      "Bash(git update-ref:*)",
      "Bash(git reset:*)"
    ]
  }
}